*** Hacer un proyecto en GitHub y subir el existente local

1. Crear el proyecto en github (sin licencia ni gitignore)
2. Crear el proyecto local. 

> nest new nestjs-task-management

> git add .
> git commit -m "First commit"
> git branch -m master main   // Renombra el master a main (github ahora tiene main)
> git remote add origin https://github.com/nerlijma/nestjs-task-management.git
> git remote -v
> git push origin main

> nest g module tasks 
> nest g co tasks --no-spec
> nest g s tasks --no-spec

npm install uuidv4
import { v4 as uuid } from 'uuid';

*** Controllers
Injectan los servicios private tasksService:TaskService
Tienen en los metodos las anotations @Get, @Post, @Put, etc.
Y aceptan la ruta. Ej @Post('/:id/status')
Los parametros se anotan con @Param, @Body, @Query

@Param('id', new ParseUUIDPipe()) id: string,
@Body() updateTaskStatus: UpdateTaskStatusDto
@Query() filter: GetTasksFilterDto

*** Pipes
> yarn add class-validator class-transformer

https://github.com/typestack/class-validator
Ahi ves la lista de decorators



import { IsNotEmpty } from "class-validator";
export class CreateTaskDto {
    @IsNotEmpty()
    title: string;

    @IsNotEmpty()
    description: string;
}

para que lo tome se agrega en main.ts
  app.useGlobalPipes(new ValidationPipe())
  await app.listen(30000);
  
Otros usados @IsString(), @IsOptional, @IsEnum(TaskStatus)

NOTA: Recomendado usar Dto como commandos. CreateTaskDto, UpdateTaskDto, etc. Y un Task para el modelo.

**** Postgress con Docker
> docker run --name postgres-nest -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres
> docker container ls
> docker container stop postgres-nest

Se usa TypeOrm https://typeorm.io/#/

> yarn add typeorm @nestjs/typeorm pg

Las entities de deben llamar con .entity task.entity.ts

import { Column, Entity, PrimaryGeneratedColumn } from "typeorm";
import { TaskStatus } from "./task.model";

@Entity()
export class Task {
    @PrimaryGeneratedColumn('uuid')
    id: string;

    @Column()
    title: string;

    @Column()
    description: string;

    @Column()
    status: TaskStatus;
}

Los repositorios se crean dentro de cada folder de feature.
task.repository.ts

Y se registran en el modulo de la feature:

@Module({
  imports: [
    TypeOrmModule.forFeature([TaskRepository])
  ],
  
task.repository.ts

import { EntityRepository, Repository } from "typeorm";
import { Task } from "./task.entity";

@EntityRepository(Task)
export class TaskRepository extends Repository<Task> {
}  

> yarn remove uuidv4, uuid

TaskService, inyectar taskRepository contructor
@InjectRepository(TaskRepository)

Los servicios son async y retornan una Promise<Task>
el base respository que heredan ya tiene los metodos basico. EJ
findOne...

*** Authentication
> nest g module auth
> nest g service auth --no-spec
> nest g controller auth --no-spec

*** Encryption 
bcript encrypt + salt
> yarn add bcrypt

*** JWT
> yarn add @nestjs/jwt @nestjs/passport passport passport-jwt
> yarn add @types/passport-jwt
Registro en auth.module.js

@Module({
  imports: [
    PassportModule.register({ defaultStrategy: 'jwt' }),
    JwtModule.register({
      secret: 'topSecret',
      signOptions: {
        expiresIn: 3600
      }
    }),

JwtModule.register Exports a service to sign tokens. se injecta en authservice
private jwtService: jwtService

En el login, se usa jwtService.sign para generar un accessToken.

Para que se valida el token en el cada endpoint:
1. Hay que crear un JwtStrategy que tiene un metodo validate, donde
consulta si existe el usuario en la base de datos y lo retorna.

Y en el constructor se indica que hay que validar el token from Bearer

constructor(
        @InjectRepository(UsersRepository)
        private usersRepository: UsersRepository
    ) {
        super({
            secretOrKey: 'topSecret51',
            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
        }
        );
    }

Luego en authModule hay que ponerlo como un provider, 
y exports: [JwtStategy, PassportModule] para que los demas lo usen.

Se protegen con @UseGuards(AuthGuard())

    @Post('/test')
    @UseGuards(AuthGuard())
    test(@Req() req) {
        console.log(req);
    }
	
Para proteger todos los metodos de un controller, se debe poner 
El @UseGuards(AuthGuard()) sobre el controller:

@Controller('tasks')
@UseGuards(AuthGuard())
export class TasksController {

Y se debe importar el AuthModule en TaskModule imports array.
 ** Excluir datos en las entities.
 
Ej. Que la task no muestre el user.
Se usa  Exclude de class-transformer, ya que  nestjs no sabe como hacerlo automaticamente.

import { Exclude } from "class-transformer";

@Exclude({ toPlainOnly: true })
@ManyToOne(_type => User, user => user.tasks, { eager: false })
user: User;

el interceptor se agrega en main.ts

  app.useGlobalInterceptors(new TransformInterceptor());
  await app.listen(30000);
  
*** Swagger
// Swagger Configuration Start
  const customOptions: SwaggerCustomOptions = {
    swaggerOptions: {
      persistAuthorization: true,
    },
    customSiteTitle: 'Task System API Docs',
  };

  const config = new DocumentBuilder()
    .setTitle('Task System')
    .setDescription('Task System API description')
    .setVersion('1.0')
    .addTag('tasks')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document, customOptions);

  // Swagger Configuration End
   
Luego cada controller debe tener   
@ApiBearerAuth()
@ApiTags('tasks')
@Controller('tasks')

**** Logger
private logger = new Logger('TasksController', { timestamp: true });
this.logger.verbose(`User ${JSON.stringify(user.username)} is creating task ${JSON.stringify(createTaskDto)}`);
