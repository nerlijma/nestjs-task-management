import { Test, TestingModule } from "@nestjs/testing";
import { getRepositoryToken } from "@nestjs/typeorm";
import { User } from "../auth/user.entity";
import { Repository } from "typeorm";
import { Task } from "./task.entity";
import { TasksService } from "./tasks.service";
import { AuthModule } from "../auth/auth.module";
// import { TaskRepository } from "./task.repository";
import { Injectable, NotFoundException } from "@nestjs/common";

export type MockType<T> = {
    [P in keyof T]?: jest.Mock<{}>;
};

// @ts-ignore
export const repositoryMockFactory: () => MockType<Repository<any>> = jest.fn(() => ({
    findOne: jest.fn(entity => entity),
    getTaskByFilter: jest.fn(entity => entity),
    // ...
}));

const user: User = {
    id: 'An User Id',
    username: 'My User Name',
    password: null,
    tasks: null
}

@Injectable()
export class TaskRepository {
    findOne(obj: any): Promise<Task> { return }
}

jest.mock('./task.repository');

describe('TaskService', () => {

    let tasksService: TasksService;
    let taskRepository: TaskRepository;

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            imports: [],
            providers: [
                TaskRepository,
                TasksService,
                // Provide your mock instead of the actual repository
                {
                    provide: getRepositoryToken(Task),
                    // useFactory: repositoryMockFactory 
                    useExisting: TaskRepository
                    // useClass: TaskRepository
                },
            ],
        }).compile();
        tasksService = module.get<TasksService>(TasksService);
        taskRepository = module.get<TaskRepository>(TaskRepository);

        // taskRepository = module.get<TaskRepository>(getRepositoryToken(Task));
        // repositoryMock = module.get(getRepositoryToken(Task));

    });

    it("should be defined", () => {
        expect(tasksService).toBeDefined();
    });

    // describe('GetAllTasks', () => {
    //     it('GelAllTasks should call getTaskByFilter', async () => {
    //         jest.spyOn(tasksService, "getTaskByFilter").mockResolvedValueOnce(null);
    //         const value = await tasksService.getAllTasks(user);
    //         expect(tasksService.getTaskByFilter).toHaveBeenCalledWith(user, null);
    //         // expect(value).toEqual(null);
    //     });
    // });

    // describe('getTaskById', () => {
    //     it('getTaskById should throw NotFoundException when not found ', async () => {
    //         jest.spyOn(taskRepository, "findOne").mockResolvedValue(null);
    //         await tasksService.getTaskById(user, "1");
    //         // expect(tasksService.getTaskByFilter).toThrow(NotFoundException);
    //     });
    // });
})